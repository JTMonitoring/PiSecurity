#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Jun 17, 2021 07:46:52 AM MST  platform: Linux

import sys
import subprocess
import os
import csv
import time
from prep_email import send_email
import json

previous = {}
first_run = True
def settings():
    try:
        if sys.argv[1] == "settings":
            os.system("python3 src/smtpsettings.py")
            exit()
    except:
        print("[SYS] Settings not started. If you haven't configured the SMTP settings do that now.")
#ping cameras
def pingCam(cameras):
	with open(os.devnull, "wb") as limbo:
		statusList = []
		ipList = []
		for n in range(len(cameras)):
			ip = cameras[n]
			result=subprocess.call(["ping", "-c", "1", "-w", "200", ip], stdout=limbo, stderr=limbo)    #ping
			if result:    #if offline add results to list
				online = False
			else:
				online = True    #if online add results to ipList
			statusList.append(online)
			ipList.append(ip)
	return (statusList, ipList)

def run(devices):
	global previous, first_run
    
	cameras = ["192.168.0.1"]      #change the ip to your cams
	statusList, ipList = pingCam(cameras)
	ping = {}
	for i in range(len(statusList)):    #add results to dictionary for later comparison
		ping[ipList[i]] = statusList[i]
	print(ping)
	if previous != ping:
		if first_run:
			first_run = False
		else:
			send_email(ping)
		
	previous = ping
	time.sleep(5)
	run()

def append_ip(ip):
    devices = []
    # print("IP: "+str(ip.get()))
    devices.append(ip)
    print("[LOG]  Device List has been Updated.")
    for i in range(0, len(devices)):
        print("[DEVICE]  @ "+devices[i].get())
    # for ip in range(100):
    # self.Scrolledlistbox1.insert(END, ip.get())
    return devices

def remove_ip(ip):
    devices.remove(ip)
    print("[LOG]  Camera List has been Updated.")
    for i in range(0, len(devices)):
        print("[DEVICE]  @ "+devices[i].get())


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import ping2_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    ping2_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    ping2_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("300x450+1498+200")
        top.minsize(1, 1)
        top.maxsize(3185, 1050)
        top.resizable(1,  1)
        top.title("Ping Monitor")
        top.configure(background="#606060")
        top.configure(highlightbackground="#777777")
        top.configure(highlightcolor="black")

        self.mainlogo = tk.Label(top)
        self.mainlogo.place(relx=0.017, rely=0.044, height=41, width=282)
        self.mainlogo.configure(activebackground="#606060")
        self.mainlogo.configure(activeforeground="white")
        self.mainlogo.configure(activeforeground="#606060")
        self.mainlogo.configure(background="#606060")
        self.mainlogo.configure(font="-family {DejaVu Sans Mono} -size 15 -weight bold")
        self.mainlogo.configure(text='''Ping Monitor''')

        self.startButton = tk.Button(top)
        self.startButton.place(relx=0.767, rely=0.867, height=23, width=53)
        self.startButton.configure(activebackground="#f9f9f9")
        self.startButton.configure(background="#45d88f")
        self.startButton.configure(borderwidth="2")
        self.startButton.configure(text='''Start''', command=lambda: run(devices))

        self.stopButton = tk.Button(top)
        self.stopButton.place(relx=0.767, rely=0.933, height=23, width=53)
        self.stopButton.configure(activebackground="#f9f9f9")
        self.stopButton.configure(background="#d85d65")
        self.stopButton.configure(borderwidth="2")
        self.stopButton.configure(text='''Stop''')

        self.Frame3 = tk.Frame(top)
        self.Frame3.place(relx=0.033, rely=0.133, relheight=0.7, relwidth=0.933)
        self.Frame3.configure(relief='groove')
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief="groove")
        self.Frame3.configure(background="#444444")

        
        self.Label1 = tk.Label(self.Frame3)
        self.Label1.place(relx=0.039, rely=0.032, height=22, width=253)
        self.Label1.configure(background="#444444")
        self.Label1.configure(text='''Enter IPs to this box and submit.''', fg='#000000')

        ip = tk.StringVar()
        self.ip = tk.StringVar(self.Frame3)
        self.Entry2 = tk.Entry(self.Frame3, textvariable=self.ip)
        self.Entry2.place(relx=0.039, rely=0.095, height=23, relwidth=0.45)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font="TkFixedFont")

        
        # def append_ip(ip):
        #     devices = []
        #     # print("IP: "+str(ip.get()))
        #     devices.append(ip)
        #     print("[LOG]  Device List has been Updated.")
        #     for i in range(0, len(devices)):
        #         print("[DEVICE]  @ "+devices[i].get())
        #         # for ip in range(100):
        #         Scrolledlistbox1.insert(END, ip.get())

        # def remove_ip(ip):
        #     devices.remove(ip)
        #     print("[LOG]  Camera List has been Updated.")
        #     for i in range(0, len(devices)):
        #         print("[DEVICE]  @ "+devices[i].get())

        self.submitButton = tk.Button(self.Frame3)
        self.submitButton.place(relx=0.536, rely=0.095, height=23, width=63)
        self.submitButton.configure(borderwidth="2")
        self.submitButton.configure(text='''Submit''', command=lambda: append_ip(self.ip))

        self.Scrolledlistbox1 = ScrolledListBox(self.Frame3)
        self.Scrolledlistbox1.place(relx=0.039, rely=0.286, relheight=0.419
                , relwidth=0.925)
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(cursor="xterm")
        self.Scrolledlistbox1.configure(font="TkFixedFont")
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="blue")
        self.Scrolledlistbox1.configure(selectforeground="white")

        self.iplistlabel = tk.Label(self.Frame3)
        self.iplistlabel.place(relx=0.039, rely=0.222, height=11, width=69)
        self.iplistlabel.configure(background="#444444")
        self.iplistlabel.configure(text='''IP List''')

        self.Entry1 = tk.Entry(self.Frame3)
        self.Entry1.place(relx=0.039, rely=0.794, height=23, relwidth=0.414)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")

        self.removeButton = tk.Button(self.Frame3)
        self.removeButton.place(relx=0.5, rely=0.794, height=23, width=63)
        self.removeButton.configure(borderwidth="2")
        self.removeButton.configure(text='''Remove''')

        self.removeLabel = tk.Label(self.Frame3)
        self.removeLabel.place(relx=0.036, rely=0.73, height=12, width=141)
        self.removeLabel.configure(background="#444444")
        self.removeLabel.configure(text='''Enter IP to remove''')

        self.settingsButton = tk.Button(top)
        self.settingsButton.place(relx=0.033, rely=0.867, height=23, width=113)
        self.settingsButton.configure(borderwidth="2")
        self.settingsButton.configure(text='''E-Mail Settings''', command=settings())

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





